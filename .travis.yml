language: cpp
sudo: false

matrix:
  include:
    # 1/ Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &clang35
        apt:
          sources: ['llvm-toolchain-precise-3.5', 'ubuntu-toolchain-r-test']
          packages: ['cmake', 'clang-3.5']
      env: COMPILER='clang++-3.5' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang35
      env: COMPILER='clang++-3.5' BUILD_TYPE='Debug'

    - os: linux
      compiler: clang
      addons: &clang36
        apt:
          sources: ['llvm-toolchain-precise-3.6', 'ubuntu-toolchain-r-test']
          packages: ['cmake', 'clang-3.6']
      env: COMPILER='clang++-3.6' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang36
      env: COMPILER='clang++-3.6' BUILD_TYPE='Debug'

    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['cmake', 'clang-3.7']
      env: COMPILER='clang++-3.7' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang37
      env: COMPILER='clang++-3.7' BUILD_TYPE='Debug'

    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc48
        apt:
         sources: ['ubuntu-toolchain-r-test']
         packages: ['cmake', 'g++-4.8']
      env: COMPILER='g++-4.8' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc48
      env: COMPILER='g++-4.8' BUILD_TYPE='Debug'


    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-4.9']
      env: COMPILER='g++-4.9' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: COMPILER='g++-4.9' BUILD_TYPE='Debug'


    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-5']
      env: COMPILER='g++-5' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc5
      env: COMPILER='g++-5' BUILD_TYPE='Debug'

    # 3/ OSX Clang Builds
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Release'

    # 4/ Coverage Build
    - os: linux
      compiler: gcc
      addons: 
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-4.6', 'lcov']
      env: COMPILER='g++-4.6' BUILD_TYPE='Debug' CHECK_COVERAGE='On'
      
before_install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      brew outdated cmake || brew upgrade cmake
    fi
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      pip install --user cpp-coveralls
    fi

before_script:
  - |
    export CXX=${COMPILER}
    cd ${TRAVIS_BUILD_DIR}
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      cmake -H./ -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTASK_BACKEND=gccasm -DCHECK_COVERAGE=On
    else
      cmake -H./ -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTASK_BACKEND=gccasm
    fi
    cd Build

script:
  - |
    make -j 2
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      make coverage
    else
      ctest -V -j 2
    fi

after_success:
  - |
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      coveralls -r ../ -b . -E '/usr/.*' -E '.*/catch/.*'
    fi
